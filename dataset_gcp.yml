id: dataset_gcp
namespace: company.team
description: |
  Course data: https://github.com/DataTalksClub/nyc-tlc-data/releases

inputs:
  - id: taxi
    type: SELECT
    displayName: Select taxi
    values: [green, yellow]
    defaults: green

  # - id: year
  #   type: SELECT
  #   displayName: Select year
  #   values: ["2019", "2020", "2021"]
  #   defaults: "2019"

  # - id: mounth
  #   type: SELECT
  #   displayName: Select month
  #   values: ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]
  #   defaults: "01"

concurrency:
  limit: 1

variables:
  file: "{{inputs.taxi}}_tripdata_{{trigger.date | date('yyyy-MM')}}.csv"
  # file: "{{inputs.taxi}}_tripdata_{{inputs.year}}-{{inputs.mounth}}.csv"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/{{vars.file}}"
  # table: "{{inputs.taxi}}_tripdata_{{inputs.year}}_{{inputs.mounth}}"
  table: "{{inputs.taxi}}_tripdata_{{trigger.date | date('yyyy-MM')}}"
  data: "{{outputs.extract.outputFiles[inputs.taxi ~ '_tripdata_' ~ (trigger.date | date('yyyy-MM')) ~ '.csv']}}"

tasks:
  - id: set_labels
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      taxi: "{{inputs.taxi}}"

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi}}/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}

  - id: upload_to_gcp
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{render(vars.data)}}"
    to: "{{render(vars.gcs_file)}}"
    
  - id: if_green
    type: io.kestra.plugin.core.flow.If
    condition: "{{ inputs.taxi == 'green' }}"
    then:
      - id: bq_green_create_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.green_tripdata` (
            unique_row_id BYTES OPTIONS (description = 'A unique identifier, generated by hashing trip atributes.'),
            filename STRING OPTIONS (description = 'Name of the CSV file.'),
            VendorID STRING OPTIONS (description = 'A code'),
            lpep_pickup_datetime TIMESTAMP OPTIONS (description = 'Start of the trip.'),
            lpep_dropoff_datetime TIMESTAMP OPTIONS (description = 'End of the trip'),
            store_and_fwd_flag STRING OPTIONS (description = 'Test'),
            RatecodeID STRING OPTIONS (description = 'Test'),
            PULocationID STRING OPTIONS (description = 'Test'),
            DOLocationID STRING OPTIONS (description = 'Test'),
            passenger_count INTEGER OPTIONS (description = 'Test'),
            trip_distance NUMERIC OPTIONS (description = 'Test'),
            fare_amount NUMERIC OPTIONS (description = 'Test'),
            extra NUMERIC OPTIONS (description = 'Test'),
            mta_tax NUMERIC OPTIONS (description = 'Test'),
            tip_amount NUMERIC OPTIONS (description = 'Test'),
            tolls_amount NUMERIC OPTIONS (description = 'Test'),
            ehail_fee NUMERIC OPTIONS (description = 'Test'),
            improvement_surcharge NUMERIC OPTIONS (description = 'Test'),
            total_amount NUMERIC OPTIONS (description = 'Test'),
            payment_type INTEGER OPTIONS (description = 'Test'),
            trip_type INTEGER OPTIONS (description = 'Test'),
            congestion_surcharge NUMERIC OPTIONS (description = 'Test')
          )
          PARTITION BY DATE(lpep_pickup_datetime)


      - id: bq_green_create_table_ext
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{render(vars.table)}}_ext` (
            VendorID STRING OPTIONS (description = 'A code'),
            lpep_pickup_datetime TIMESTAMP OPTIONS (description = 'Start of the trip.'),
            lpep_dropoff_datetime TIMESTAMP OPTIONS (description = 'End of the trip'),
            store_and_fwd_flag STRING OPTIONS (description = 'Test'),
            RatecodeID STRING OPTIONS (description = 'Test'),
            PULocationID STRING OPTIONS (description = 'Test'),
            DOLocationID STRING OPTIONS (description = 'Test'),
            passenger_count INTEGER OPTIONS (description = 'Test'),
            trip_distance NUMERIC OPTIONS (description = 'Test'),
            fare_amount NUMERIC OPTIONS (description = 'Test'),
            extra NUMERIC OPTIONS (description = 'Test'),
            mta_tax NUMERIC OPTIONS (description = 'Test'),
            tip_amount NUMERIC OPTIONS (description = 'Test'),
            tolls_amount NUMERIC OPTIONS (description = 'Test'),
            ehail_fee NUMERIC OPTIONS (description = 'Test'),
            improvement_surcharge NUMERIC OPTIONS (description = 'Test'),
            total_amount NUMERIC OPTIONS (description = 'Test'),
            payment_type INTEGER OPTIONS (description = 'Test'),
            trip_type INTEGER OPTIONS (description = 'Test'),
            congestion_surcharge NUMERIC OPTIONS (description = 'Test')
          )
          OPTIONS (
            format = 'CSV',
            uris = ['{{render(vars.gcs_file)}}'],
            skip_leading_rows = 1,
            ignore_unknown_values = TRUE
          );

      - id: bq_green_table_tmp
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{render(vars.table)}}`
          AS (
            SELECT
              MD5(
                CONCAT(
                  COALESCE(CAST(VendorID AS STRING), ''),
                  COALESCE(CAST(lpep_pickup_datetime AS STRING), ''),
                  COALESCE(CAST(lpep_dropoff_datetime AS STRING), ''),
                  COALESCE(CAST(PULocationID AS STRING), ''),
                  COALESCE(CAST(DOLocationID AS STRING), '')
                )
              ) AS unique_row_id,
              '{{render(vars.file)}}' AS filename,
              *
            FROM `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{render(vars.table)}}_ext`
          );
            
      - id: bq_green_merge_data
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.green_tripdata` T
          USING `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{render(vars.table)}}` S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
          INSERT (
            unique_row_id, filename, VendorID, lpep_pickup_datetime, lpep_dropoff_datetime,
            store_and_fwd_flag, RatecodeID, PULocationID, DOLocationID, passenger_count,
            trip_distance, fare_amount, extra, mta_tax, tip_amount, tolls_amount, ehail_fee,
            improvement_surcharge, total_amount, payment_type, trip_type, congestion_surcharge
          )
          VALUES ( 
            S.unique_row_id, S.filename, S.VendorID, S.lpep_pickup_datetime, S.lpep_dropoff_datetime,
            S.store_and_fwd_flag, S.RatecodeID, S.PULocationID, S.DOLocationID, S.passenger_count,
            S.trip_distance, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.ehail_fee,
            S.improvement_surcharge, S.total_amount, S.payment_type, S.trip_type, S.congestion_surcharge
          );

  - id: if_yellow
    type: io.kestra.plugin.core.flow.If
    condition: "{{ inputs.taxi == 'yellow' }}"
    then:
      - id: bq_yellow_create_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.yellow_tripdata` (
            unique_row_id BYTES OPTIONS (description = 'A unique identifier, generated by hashing trip atributes.'),
            filename STRING OPTIONS (description = 'Name of the CSV file.'),
            VendorID STRING OPTIONS (description = 'A code'),
            tpep_pickup_datetime TIMESTAMP OPTIONS (description = 'Start of the trip.'),
            tpep_dropoff_datetime TIMESTAMP OPTIONS (description = 'End of the trip'),
            store_and_fwd_flag STRING OPTIONS (description = 'Test'),
            RatecodeID STRING OPTIONS (description = 'Test'),
            PULocationID STRING OPTIONS (description = 'Test'),
            DOLocationID STRING OPTIONS (description = 'Test'),
            passenger_count INTEGER OPTIONS (description = 'Test'),
            trip_distance NUMERIC OPTIONS (description = 'Test'),
            fare_amount NUMERIC OPTIONS (description = 'Test'),
            extra NUMERIC OPTIONS (description = 'Test'),
            mta_tax NUMERIC OPTIONS (description = 'Test'),
            tip_amount NUMERIC OPTIONS (description = 'Test'),
            tolls_amount NUMERIC OPTIONS (description = 'Test'),
            improvement_surcharge NUMERIC OPTIONS (description = 'Test'),
            total_amount NUMERIC OPTIONS (description = 'Test'),
            payment_type NUMERIC OPTIONS (description = 'Test'),
            congestion_surcharge NUMERIC OPTIONS (description = 'Test')
          )
          PARTITION BY DATE(tpep_pickup_datetime)

      - id: bq_yellow_create_staging_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{render(vars.table)}}_ext` (
            VendorID STRING OPTIONS (description = 'A code'),
            tpep_pickup_datetime TIMESTAMP OPTIONS (description = 'Start of the trip.'),
            tpep_dropoff_datetime TIMESTAMP OPTIONS (description = 'End of the trip'),
            store_and_fwd_flag STRING OPTIONS (description = 'Test'),
            RatecodeID STRING OPTIONS (description = 'Test'),
            PULocationID STRING OPTIONS (description = 'Test'),
            DOLocationID STRING OPTIONS (description = 'Test'),
            passenger_count INTEGER OPTIONS (description = 'Test'),
            trip_distance NUMERIC OPTIONS (description = 'Test'),
            fare_amount NUMERIC OPTIONS (description = 'Test'),
            extra NUMERIC OPTIONS (description = 'Test'),
            mta_tax NUMERIC OPTIONS (description = 'Test'),
            tip_amount NUMERIC OPTIONS (description = 'Test'),
            tolls_amount NUMERIC OPTIONS (description = 'Test'),
            improvement_surcharge NUMERIC OPTIONS (description = 'Test'),
            total_amount NUMERIC OPTIONS (description = 'Test'),
            payment_type NUMERIC OPTIONS (description = 'Test'),
            congestion_surcharge NUMERIC OPTIONS (description = 'Test')
          )
          OPTIONS (
            format = 'CSV',
            uris = ['{{render(vars.gcs_file)}}'],
            skip_leading_rows = 1,
            ignore_unknown_values = TRUE
          );

      - id: bq_yellow_add_unique_id_and_filename
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{render(vars.table)}}`
          AS (
            SELECT
              MD5(
                CONCAT(
                  COALESCE(CAST(VendorID AS STRING), ''),
                  COALESCE(CAST(tpep_pickup_datetime AS STRING), ''),
                  COALESCE(CAST(tpep_dropoff_datetime AS STRING), ''),
                  COALESCE(CAST(PULocationID AS STRING), ''),
                  COALESCE(CAST(DOLocationID AS STRING), '')
                )
              ) AS unique_row_id,
              '{{render(vars.file)}}' AS filename,
              *
            FROM `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{render(vars.table)}}_ext`
          );
            
      - id: bq_yellow_merge_data
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.yellow_tripdata` T
          USING `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{render(vars.table)}}` S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
          INSERT (
            unique_row_id, filename, VendorID, tpep_pickup_datetime, tpep_dropoff_datetime,
            store_and_fwd_flag, RatecodeID, PULocationID, DOLocationID, passenger_count,
            trip_distance, fare_amount, extra, mta_tax, tip_amount, tolls_amount,
            improvement_surcharge, total_amount, payment_type, congestion_surcharge
          )
          VALUES ( 
            S.unique_row_id, S.filename, S.VendorID, S.tpep_pickup_datetime, S.tpep_dropoff_datetime,
            S.store_and_fwd_flag, S.RatecodeID, S.PULocationID, S.DOLocationID, S.passenger_count,
            S.trip_distance, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount,
            S.improvement_surcharge, S.total_amount, S.payment_type, S.congestion_surcharge
          );

  - id: bq_drop_tmp_table
    type: io.kestra.plugin.gcp.bigquery.DeleteTable
    dataset: "{{kv('GCP_DATASET')}}"
    table: "{{render(vars.table)}}"


  - id: bq_drop_ext_staging_table
    type: io.kestra.plugin.gcp.bigquery.DeleteTable
    dataset: "{{kv('GCP_DATASET')}}"
    table: "{{render(vars.table)}}_ext"

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: This will remove output files of the run.

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"

triggers:
  - id: scheduler_green
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 9 1 * *"
    inputs: 
      taxi: green
  
  - id: schedule_yellow
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 10 1 * *"
    inputs:
      taxi: yellow